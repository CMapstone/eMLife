def BuildTransferModel(num_classes,h):
    
    model = tf.keras.Sequential()
    model.add(keras.layers.Dropout(0.5))
    model.add(keras.layers.Dense(h, activation="relu", input_shape=(1280,)))
    prediction_layer = keras.layers.Dense(num_classes, activation='softmax')
    model.add(prediction_layer)
    model.compile(optimizer=tf.keras.optimizers.RMSprop(lr=0.0001),
                  loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),
                  metrics=['accuracy'])
    return model

def RunTransferModel(outputfolder,transfer_model_name, Xtrain, Ytrain, model,Xval,Yval):
    
    val_loss_best=0.0    
    for j in range(0,1000,10):        
        train_history = model.fit(Xtrain, Ytrain, batch_size=128, epochs=10,verbose=2, validation_data=(Xval, Yval))
        val_loss = train_history.history['val_accuracy'] 
        if val_loss[9]>=val_loss_best:
            val_loss_best=val_loss[9]
            model.save(outputfolder+transfer_model_name+str(i)+'.h5')
    
    return 